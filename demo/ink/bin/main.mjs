import { dirname } from 'path';
import { Box, Text } from 'ink';
import ModemSpeedSelect from "./ModemSpeedSelect.mjs";
import BlinkingSelect from "./BlinkingSelect.mjs";
import ScrollingSelect from "./ScrollingSelect.mjs";
import TransparencySelect from "./TransparencySelect.mjs";
import AnsiDisplay from "./AnsiDisplay.mjs";
import AnsiSlideShow from "./AnsiSlideShow.mjs";
import FileList from "./FileList.mjs";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export default async function* main(methods) {
  const {
    wrap,
    manageRoute,
    manageEvents,
    replacing
  } = methods;
  const [parts] = manageRoute();
  const [on, eventual] = manageEvents();
  wrap(children => {
    return /*#__PURE__*/_jsxs(Box, {
      children: [/*#__PURE__*/_jsxs(Box, {
        flexDirection: "column",
        children: [/*#__PURE__*/_jsx(ModemSpeedSelect, {}), /*#__PURE__*/_jsx(BlinkingSelect, {}), /*#__PURE__*/_jsx(ScrollingSelect, {}), /*#__PURE__*/_jsx(TransparencySelect, {})]
      }), /*#__PURE__*/_jsx(Box, {
        children: children
      })]
    });
  });
  for (;;) {
    try {
      if (parts[0] === undefined) {
        replacing(() => parts[0] = 'list');
      } else if (parts[0] === 'list') {
        yield /*#__PURE__*/_jsx(FileList, {
          folder: parts[1],
          selected: parts[2],
          onFileSelect: on.file,
          onFolderSelect: on.folder
        });
        const {
          file,
          folder
        } = await eventual.file.or.folder;
        parts.splice(0);
        if (folder) {
          parts.push('list', folder);
        } else if (file) {
          parts.push('show', file);
        }
      } else if (parts[0] === 'show') {
        const path = parts[1];
        yield /*#__PURE__*/_jsx(AnsiDisplay, {
          src: parts[1],
          onExit: on.exit
        });
        await eventual.exit;
        parts.splice(0);
        parts.push('list', dirname(path), path);
      } else if (parts[0] === 'loop') {
        const paths = parts.slice(1);
        yield /*#__PURE__*/_jsx(AnsiSlideShow, {
          srcList: paths,
          onExit: on.exit
        });
        await eventual.exit;
        process.exit(0);
      } else {
        throw new Error(`Unrecognized command: ${parts[0]}`);
      }
    } catch (err) {
      // not sure why Ink complains when nothing is yielded prior to program exit
      yield null;
      console.error(err.message);
      process.exit(1);
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkaXJuYW1lIiwiQm94IiwiVGV4dCIsIk1vZGVtU3BlZWRTZWxlY3QiLCJCbGlua2luZ1NlbGVjdCIsIlNjcm9sbGluZ1NlbGVjdCIsIlRyYW5zcGFyZW5jeVNlbGVjdCIsIkFuc2lEaXNwbGF5IiwiQW5zaVNsaWRlU2hvdyIsIkZpbGVMaXN0IiwibWFpbiIsIm1ldGhvZHMiLCJ3cmFwIiwibWFuYWdlUm91dGUiLCJtYW5hZ2VFdmVudHMiLCJyZXBsYWNpbmciLCJwYXJ0cyIsIm9uIiwiZXZlbnR1YWwiLCJjaGlsZHJlbiIsInVuZGVmaW5lZCIsImZpbGUiLCJmb2xkZXIiLCJvciIsInNwbGljZSIsInB1c2giLCJwYXRoIiwiZXhpdCIsInBhdGhzIiwic2xpY2UiLCJwcm9jZXNzIiwiRXJyb3IiLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJtZXNzYWdlIl0sInNvdXJjZXMiOlsibWFpbi5qc3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGlybmFtZSB9IGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgQm94LCBUZXh0IH0gZnJvbSAnaW5rJztcbmltcG9ydCBNb2RlbVNwZWVkU2VsZWN0IGZyb20gJy4vTW9kZW1TcGVlZFNlbGVjdC5qc3gnO1xuaW1wb3J0IEJsaW5raW5nU2VsZWN0IGZyb20gJy4vQmxpbmtpbmdTZWxlY3QuanN4JztcbmltcG9ydCBTY3JvbGxpbmdTZWxlY3QgZnJvbSAnLi9TY3JvbGxpbmdTZWxlY3QuanN4JztcbmltcG9ydCBUcmFuc3BhcmVuY3lTZWxlY3QgZnJvbSAnLi9UcmFuc3BhcmVuY3lTZWxlY3QuanN4JztcbmltcG9ydCBBbnNpRGlzcGxheSBmcm9tICcuL0Fuc2lEaXNwbGF5LmpzeCc7XG5pbXBvcnQgQW5zaVNsaWRlU2hvdyBmcm9tICcuL0Fuc2lTbGlkZVNob3cuanN4JztcbmltcG9ydCBGaWxlTGlzdCBmcm9tICcuL0ZpbGVMaXN0LmpzeCc7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uKiBtYWluKG1ldGhvZHMpIHtcbiAgY29uc3QgeyB3cmFwLCBtYW5hZ2VSb3V0ZSwgbWFuYWdlRXZlbnRzLCByZXBsYWNpbmcgfSA9IG1ldGhvZHM7XG4gIGNvbnN0IFsgcGFydHMgXSA9IG1hbmFnZVJvdXRlKCk7XG4gIGNvbnN0IFsgb24sIGV2ZW50dWFsIF0gPSBtYW5hZ2VFdmVudHMoKTtcbiAgd3JhcCgoY2hpbGRyZW4pID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPEJveD5cbiAgICAgICAgPEJveCBmbGV4RGlyZWN0aW9uPVwiY29sdW1uXCI+XG4gICAgICAgICAgPE1vZGVtU3BlZWRTZWxlY3QgLz5cbiAgICAgICAgICA8QmxpbmtpbmdTZWxlY3QgLz5cbiAgICAgICAgICA8U2Nyb2xsaW5nU2VsZWN0IC8+XG4gICAgICAgICAgPFRyYW5zcGFyZW5jeVNlbGVjdCAvPlxuICAgICAgICA8L0JveD5cbiAgICAgICAgPEJveD5cbiAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvQm94PlxuICAgICAgPC9Cb3g+XG4gICAgKTtcbiAgfSk7XG4gIGZvciAoOzspIHtcbiAgICB0cnkge1xuICAgICAgaWYgKHBhcnRzWzBdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVwbGFjaW5nKCgpID0+IHBhcnRzWzBdID0gJ2xpc3QnKVxuICAgICAgfSBlbHNlIGlmIChwYXJ0c1swXSA9PT0gJ2xpc3QnKSB7XG4gICAgICAgIHlpZWxkIDxGaWxlTGlzdCBmb2xkZXI9e3BhcnRzWzFdfSBzZWxlY3RlZD17cGFydHNbMl19IG9uRmlsZVNlbGVjdD17b24uZmlsZX0gb25Gb2xkZXJTZWxlY3Q9e29uLmZvbGRlcn0gLz47XG4gICAgICAgIGNvbnN0IHsgZmlsZSwgZm9sZGVyIH0gPSBhd2FpdCBldmVudHVhbC5maWxlLm9yLmZvbGRlcjtcbiAgICAgICAgcGFydHMuc3BsaWNlKDApO1xuICAgICAgICBpZiAoZm9sZGVyKSB7XG4gICAgICAgICAgcGFydHMucHVzaCgnbGlzdCcsIGZvbGRlcik7XG4gICAgICAgIH0gZWxzZSBpZiAoZmlsZSkge1xuICAgICAgICAgIHBhcnRzLnB1c2goJ3Nob3cnLCBmaWxlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwYXJ0c1swXSA9PT0gJ3Nob3cnKSB7XG4gICAgICAgIGNvbnN0IHBhdGggPSBwYXJ0c1sxXTtcbiAgICAgICAgeWllbGQgPEFuc2lEaXNwbGF5IHNyYz17cGFydHNbMV19IG9uRXhpdD17b24uZXhpdH0gLz47XG4gICAgICAgIGF3YWl0IGV2ZW50dWFsLmV4aXQ7XG4gICAgICAgIHBhcnRzLnNwbGljZSgwKTtcbiAgICAgICAgcGFydHMucHVzaCgnbGlzdCcsIGRpcm5hbWUocGF0aCksIHBhdGgpO1xuICAgICAgfSBlbHNlIGlmIChwYXJ0c1swXSA9PT0gJ2xvb3AnKSB7XG4gICAgICAgIGNvbnN0IHBhdGhzID0gcGFydHMuc2xpY2UoMSk7XG4gICAgICAgIHlpZWxkIDxBbnNpU2xpZGVTaG93IHNyY0xpc3Q9e3BhdGhzfSBvbkV4aXQ9e29uLmV4aXR9IC8+O1xuICAgICAgICBhd2FpdCBldmVudHVhbC5leGl0O1xuICAgICAgICBwcm9jZXNzLmV4aXQoMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVucmVjb2duaXplZCBjb21tYW5kOiAke3BhcnRzWzBdfWApO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgLy8gbm90IHN1cmUgd2h5IEluayBjb21wbGFpbnMgd2hlbiBub3RoaW5nIGlzIHlpZWxkZWQgcHJpb3IgdG8gcHJvZ3JhbSBleGl0XG4gICAgICB5aWVsZCBudWxsO1xuICAgICAgY29uc29sZS5lcnJvcihlcnIubWVzc2FnZSk7ICAgICAgXG4gICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgfVxuICB9XG59XG5cblxuIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxPQUFPLFFBQVEsTUFBTTtBQUM5QixTQUFTQyxHQUFHLEVBQUVDLElBQUksUUFBUSxLQUFLO0FBQy9CLE9BQU9DLGdC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