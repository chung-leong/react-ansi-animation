import { dirname } from 'path';
import { Box, Text } from 'ink';
import ModemSpeedSelect from "./ModemSpeedSelect.mjs";
import BlinkingSelect from "./BlinkingSelect.mjs";
import ScrollingSelect from "./ScrollingSelect.mjs";
import TransparencySelect from "./TransparencySelect.mjs";
import AnsiDisplay from "./AnsiDisplay.mjs";
import AnsiSlideShow from "./AnsiSlideShow.mjs";
import FileList from "./FileList.mjs";
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export default async function* main(methods) {
  const {
    wrap,
    throw404,
    manageRoute,
    manageEvents,
    replacing
  } = methods;
  const [parts] = manageRoute();
  const [on, eventual] = manageEvents();
  wrap(children => {
    return /*#__PURE__*/_jsxs(Box, {
      children: [/*#__PURE__*/_jsxs(Box, {
        flexDirection: "column",
        children: [/*#__PURE__*/_jsx(ModemSpeedSelect, {}), /*#__PURE__*/_jsx(BlinkingSelect, {}), /*#__PURE__*/_jsx(ScrollingSelect, {}), /*#__PURE__*/_jsx(TransparencySelect, {})]
      }), /*#__PURE__*/_jsx(Box, {
        children: children
      })]
    });
  });
  for (;;) {
    try {
      if (parts[0] === undefined) {
        replacing(() => parts[0] = 'list');
      } else if (parts[0] === 'list') {
        yield /*#__PURE__*/_jsx(FileList, {
          folder: parts[1],
          selected: parts[2],
          onFileSelect: on.file,
          onFolderSelect: on.folder
        });
        const {
          file,
          folder
        } = await eventual.file.or.folder;
        parts.splice(0);
        if (folder) {
          parts.push('list', folder);
        } else if (file) {
          parts.push('show', file);
        }
      } else if (parts[0] === 'show') {
        const path = parts[1];
        yield /*#__PURE__*/_jsx(AnsiDisplay, {
          src: parts[1],
          onExit: on.exit
        });
        await eventual.exit;
        parts.splice(0);
        parts.push('list', dirname(path), path);
      } else if (parts[0] === 'loop') {
        try {
          const paths = parts.slice(1);
          yield /*#__PURE__*/_jsx(AnsiSlideShow, {
            srcList: paths,
            onExit: on.exit
          });
          await eventual.exit;
          process.exit(0);
        } catch (err) {
          console.error(err);
          process.exit(1);
        }
      } else {
        throw404();
      }
    } catch (err) {
      yield /*#__PURE__*/_jsx(Text, {
        children: err.message
      });
      await eventual.exit;
    }
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkaXJuYW1lIiwiQm94IiwiVGV4dCIsIk1vZGVtU3BlZWRTZWxlY3QiLCJCbGlua2luZ1NlbGVjdCIsIlNjcm9sbGluZ1NlbGVjdCIsIlRyYW5zcGFyZW5jeVNlbGVjdCIsIkFuc2lEaXNwbGF5IiwiQW5zaVNsaWRlU2hvdyIsIkZpbGVMaXN0IiwibWFpbiIsIm1ldGhvZHMiLCJ3cmFwIiwidGhyb3c0MDQiLCJtYW5hZ2VSb3V0ZSIsIm1hbmFnZUV2ZW50cyIsInJlcGxhY2luZyIsInBhcnRzIiwib24iLCJldmVudHVhbCIsImNoaWxkcmVuIiwidW5kZWZpbmVkIiwiZmlsZSIsImZvbGRlciIsIm9yIiwic3BsaWNlIiwicHVzaCIsInBhdGgiLCJleGl0IiwicGF0aHMiLCJzbGljZSIsInByb2Nlc3MiLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJtZXNzYWdlIl0sInNvdXJjZXMiOlsibWFpbi5qc3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGlybmFtZSB9IGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgQm94LCBUZXh0IH0gZnJvbSAnaW5rJztcbmltcG9ydCBNb2RlbVNwZWVkU2VsZWN0IGZyb20gJy4vTW9kZW1TcGVlZFNlbGVjdC5qc3gnO1xuaW1wb3J0IEJsaW5raW5nU2VsZWN0IGZyb20gJy4vQmxpbmtpbmdTZWxlY3QuanN4JztcbmltcG9ydCBTY3JvbGxpbmdTZWxlY3QgZnJvbSAnLi9TY3JvbGxpbmdTZWxlY3QuanN4JztcbmltcG9ydCBUcmFuc3BhcmVuY3lTZWxlY3QgZnJvbSAnLi9UcmFuc3BhcmVuY3lTZWxlY3QuanN4JztcbmltcG9ydCBBbnNpRGlzcGxheSBmcm9tICcuL0Fuc2lEaXNwbGF5LmpzeCc7XG5pbXBvcnQgQW5zaVNsaWRlU2hvdyBmcm9tICcuL0Fuc2lTbGlkZVNob3cuanN4JztcbmltcG9ydCBGaWxlTGlzdCBmcm9tICcuL0ZpbGVMaXN0LmpzeCc7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uKiBtYWluKG1ldGhvZHMpIHtcbiAgY29uc3QgeyB3cmFwLCB0aHJvdzQwNCwgbWFuYWdlUm91dGUsIG1hbmFnZUV2ZW50cywgcmVwbGFjaW5nIH0gPSBtZXRob2RzO1xuICBjb25zdCBbIHBhcnRzIF0gPSBtYW5hZ2VSb3V0ZSgpO1xuICBjb25zdCBbIG9uLCBldmVudHVhbCBdID0gbWFuYWdlRXZlbnRzKCk7XG4gIHdyYXAoKGNoaWxkcmVuKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxCb3g+XG4gICAgICAgIDxCb3ggZmxleERpcmVjdGlvbj1cImNvbHVtblwiPlxuICAgICAgICAgIDxNb2RlbVNwZWVkU2VsZWN0IC8+XG4gICAgICAgICAgPEJsaW5raW5nU2VsZWN0IC8+XG4gICAgICAgICAgPFNjcm9sbGluZ1NlbGVjdCAvPlxuICAgICAgICAgIDxUcmFuc3BhcmVuY3lTZWxlY3QgLz5cbiAgICAgICAgPC9Cb3g+XG4gICAgICAgIDxCb3g+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L0JveD5cbiAgICAgIDwvQm94PlxuICAgICk7XG4gIH0pO1xuICBmb3IgKDs7KSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChwYXJ0c1swXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlcGxhY2luZygoKSA9PiBwYXJ0c1swXSA9ICdsaXN0JylcbiAgICAgIH0gZWxzZSBpZiAocGFydHNbMF0gPT09ICdsaXN0Jykge1xuICAgICAgICB5aWVsZCA8RmlsZUxpc3QgZm9sZGVyPXtwYXJ0c1sxXX0gc2VsZWN0ZWQ9e3BhcnRzWzJdfSBvbkZpbGVTZWxlY3Q9e29uLmZpbGV9IG9uRm9sZGVyU2VsZWN0PXtvbi5mb2xkZXJ9IC8+O1xuICAgICAgICBjb25zdCB7IGZpbGUsIGZvbGRlciB9ID0gYXdhaXQgZXZlbnR1YWwuZmlsZS5vci5mb2xkZXI7XG4gICAgICAgIHBhcnRzLnNwbGljZSgwKTtcbiAgICAgICAgaWYgKGZvbGRlcikge1xuICAgICAgICAgIHBhcnRzLnB1c2goJ2xpc3QnLCBmb2xkZXIpO1xuICAgICAgICB9IGVsc2UgaWYgKGZpbGUpIHtcbiAgICAgICAgICBwYXJ0cy5wdXNoKCdzaG93JywgZmlsZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocGFydHNbMF0gPT09ICdzaG93Jykge1xuICAgICAgICBjb25zdCBwYXRoID0gcGFydHNbMV07XG4gICAgICAgIHlpZWxkIDxBbnNpRGlzcGxheSBzcmM9e3BhcnRzWzFdfSBvbkV4aXQ9e29uLmV4aXR9IC8+O1xuICAgICAgICBhd2FpdCBldmVudHVhbC5leGl0O1xuICAgICAgICBwYXJ0cy5zcGxpY2UoMCk7XG4gICAgICAgIHBhcnRzLnB1c2goJ2xpc3QnLCBkaXJuYW1lKHBhdGgpLCBwYXRoKTtcbiAgICAgIH0gZWxzZSBpZiAocGFydHNbMF0gPT09ICdsb29wJykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHBhdGhzID0gcGFydHMuc2xpY2UoMSk7XG4gICAgICAgICAgeWllbGQgPEFuc2lTbGlkZVNob3cgc3JjTGlzdD17cGF0aHN9IG9uRXhpdD17b24uZXhpdH0gLz47XG4gICAgICAgICAgYXdhaXQgZXZlbnR1YWwuZXhpdDtcbiAgICAgICAgICBwcm9jZXNzLmV4aXQoMCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93NDA0KCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB5aWVsZCA8VGV4dCA+e2Vyci5tZXNzYWdlfTwvVGV4dD47XG4gICAgICBhd2FpdCBldmVudHVhbC5leGl0O1xuICAgIH1cbiAgfVxufVxuXG5cbiJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsT0FBTyxRQUFRLE1BQU07QUFDOUIsU0FBU0MsR0FBRyxFQUFFQyxJQUFJLFFBQVEsS0FBSztBQUMvQixPQUFPQyxnQkFBZ0I7QUFD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