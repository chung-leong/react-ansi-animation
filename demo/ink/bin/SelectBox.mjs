import { useFocus, useInput, Text, Box } from 'ink';
import InkSelectInput from 'ink-select-input';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
const {
  default: SelectInput
} = InkSelectInput;
export default function SelectBox({
  id,
  items,
  label: labelWithAmp,
  value,
  home,
  onSelect: onSelectCaller
}) {
  const {
    isFocused,
    focus
  } = useFocus({
    id
  });
  const initialIndex = items.findIndex(i => i.value === value);
  const [label, hotkey] = extractHotkey(labelWithAmp);
  useInput(input => {
    if (input.toUpperCase() === hotkey) {
      focus(id);
    }
  }, {
    isActive: !isFocused
  });
  if (isFocused) {
    const onSelect = item => {
      onSelectCaller?.(item);
      if (home) {
        // refocus main content (after this component has updated)
        setTimeout(() => focus(home), 0);
      }
    };
    return /*#__PURE__*/_jsxs(Box, {
      borderStyle: "round",
      borderColor: "blue",
      children: [/*#__PURE__*/_jsx(Text, {
        children: label
      }), /*#__PURE__*/_jsx(SelectInput, {
        items,
        initialIndex,
        onSelect
      })]
    });
  } else {
    const minWidth = items.reduce((w, i) => Math.max(w, i.label.length + 2), 2);
    const item = items[initialIndex];
    return /*#__PURE__*/_jsxs(Box, {
      borderStyle: "round",
      children: [/*#__PURE__*/_jsx(Text, {
        children: label
      }), /*#__PURE__*/_jsx(Box, {
        minWidth: minWidth,
        children: /*#__PURE__*/_jsxs(Text, {
          children: [": ", item?.label]
        })
      })]
    });
  }
}
function extractHotkey(labelWithAmp) {
  const m = /(.*)&(\w)(.*)/.exec(labelWithAmp);
  if (!m) {
    return [labelWithAmp];
  }
  return [/*#__PURE__*/_jsxs(Text, {
    children: [m[1], /*#__PURE__*/_jsx(Text, {
      underline: true,
      children: m[2]
    }), m[3]]
  }), m[2].toUpperCase()];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1c2VGb2N1cyIsInVzZUlucHV0IiwiVGV4dCIsIkJveCIsIklua1NlbGVjdElucHV0IiwiZGVmYXVsdCIsIlNlbGVjdElucHV0IiwiU2VsZWN0Qm94IiwiaWQiLCJpdGVtcyIsImxhYmVsIiwibGFiZWxXaXRoQW1wIiwidmFsdWUiLCJob21lIiwib25TZWxlY3QiLCJvblNlbGVjdENhbGxlciIsImlzRm9jdXNlZCIsImZvY3VzIiwiaW5pdGlhbEluZGV4IiwiZmluZEluZGV4IiwiaSIsImhvdGtleSIsImV4dHJhY3RIb3RrZXkiLCJpbnB1dCIsInRvVXBwZXJDYXNlIiwiaXNBY3RpdmUiLCJpdGVtIiwic2V0VGltZW91dCIsIm1pbldpZHRoIiwicmVkdWNlIiwidyIsIk1hdGgiLCJtYXgiLCJsZW5ndGgiLCJtIiwiZXhlYyJdLCJzb3VyY2VzIjpbIlNlbGVjdEJveC5qc3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRm9jdXMsIHVzZUlucHV0LCBUZXh0LCBCb3ggfSBmcm9tICdpbmsnO1xuaW1wb3J0IElua1NlbGVjdElucHV0IGZyb20gJ2luay1zZWxlY3QtaW5wdXQnOyBjb25zdCB7IGRlZmF1bHQ6IFNlbGVjdElucHV0IH0gPSBJbmtTZWxlY3RJbnB1dDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU2VsZWN0Qm94KHsgaWQsIGl0ZW1zLCBsYWJlbDogbGFiZWxXaXRoQW1wLCB2YWx1ZSwgaG9tZSwgb25TZWxlY3Q6IG9uU2VsZWN0Q2FsbGVyIH0pIHtcbiAgY29uc3QgeyBpc0ZvY3VzZWQsIGZvY3VzIH0gPSB1c2VGb2N1cyh7IGlkIH0pO1xuICBjb25zdCBpbml0aWFsSW5kZXggPSBpdGVtcy5maW5kSW5kZXgoaSA9PiBpLnZhbHVlID09PSB2YWx1ZSk7XG4gIGNvbnN0IFsgbGFiZWwsIGhvdGtleSBdID0gZXh0cmFjdEhvdGtleShsYWJlbFdpdGhBbXApO1xuICB1c2VJbnB1dCgoaW5wdXQpID0+IHtcbiAgICBpZiAoaW5wdXQudG9VcHBlckNhc2UoKSA9PT0gaG90a2V5KSB7XG4gICAgICBmb2N1cyhpZCk7XG4gICAgfVxuICB9LCB7IGlzQWN0aXZlOiAhaXNGb2N1c2VkIH0pO1xuICBpZiAoaXNGb2N1c2VkKSB7XG4gICAgY29uc3Qgb25TZWxlY3QgPSAoaXRlbSkgPT4ge1xuICAgICAgb25TZWxlY3RDYWxsZXI/LihpdGVtKTtcbiAgICAgIGlmIChob21lKSB7XG4gICAgICAgIC8vIHJlZm9jdXMgbWFpbiBjb250ZW50IChhZnRlciB0aGlzIGNvbXBvbmVudCBoYXMgdXBkYXRlZClcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiBmb2N1cyhob21lKSwgMCk7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gKFxuICAgICAgPEJveCBib3JkZXJTdHlsZT1cInJvdW5kXCIgYm9yZGVyQ29sb3I9XCJibHVlXCI+XG4gICAgICAgIDxUZXh0PntsYWJlbH08L1RleHQ+XG4gICAgICAgIDxTZWxlY3RJbnB1dCB7Li4ueyBpdGVtcywgaW5pdGlhbEluZGV4LCBvblNlbGVjdCB9fSAvPlxuICAgICAgPC9Cb3g+XG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBtaW5XaWR0aCA9IGl0ZW1zLnJlZHVjZSgodywgaSkgPT4gTWF0aC5tYXgodywgaS5sYWJlbC5sZW5ndGggKyAyKSwgMik7XG4gICAgY29uc3QgaXRlbSA9IGl0ZW1zW2luaXRpYWxJbmRleF07XG4gICAgcmV0dXJuIChcbiAgICAgIDxCb3ggYm9yZGVyU3R5bGU9XCJyb3VuZFwiPlxuICAgICAgICA8VGV4dD57bGFiZWx9PC9UZXh0PlxuICAgICAgICA8Qm94IG1pbldpZHRoPXttaW5XaWR0aH0+PFRleHQ+OiB7aXRlbT8ubGFiZWx9PC9UZXh0PjwvQm94PlxuICAgICAgPC9Cb3g+XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0SG90a2V5KGxhYmVsV2l0aEFtcCkge1xuICBjb25zdCBtID0gLyguKikmKFxcdykoLiopLy5leGVjKGxhYmVsV2l0aEFtcCk7XG4gIGlmICghbSkge1xuICAgIHJldHVybiBbIGxhYmVsV2l0aEFtcCBdO1xuICB9XG4gIHJldHVybiBbXG4gICAgPFRleHQ+e21bMV19PFRleHQgdW5kZXJsaW5lPnttWzJdfTwvVGV4dD57bVszXX08L1RleHQ+LFxuICAgIG1bMl0udG9VcHBlckNhc2UoKVxuICBdO1xufSJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsUUFBUSxFQUFFQyxRQUFRLEVBQUVDLElBQUksRUFBRUMsR0FBRyxRQUFRLEtBQUs7QUFDbkQsT0FBT0MsY0FBYyxNQUFNLGtCQUFrQjtBQUFDO0FBQUE7QUFBQyxNQUFNO0VBQUVDLE9BQU8sRUFBRUM7QUFBWSxDQUFDLEdBQUdGLGNBQWM7QUFFOUYsZUFBZSxTQUFTRyxTQUFTLENBQUM7RUFBRUMsRUFBRTtFQUFFQyxLQUFLO0VBQUVDLEtBQUssRUFBRUMsWUFBWTtFQUFFQyxLQUFLO0VBQUVDLElBQUk7RUFBRUMsUUFBUSxFQUFFQztBQUFlLENBQUMsRUFBRTtFQUMzRyxNQUFNO0lBQUVDLFNBQVM7SUFBRUM7RUFBTSxDQUFDLEdBQUdqQixRQUFRLENBQUM7SUFBRVE7RUFBRyxDQUFDLENBQUM7RUFDN0MsTUFBTVUsWUFBWSxHQUFHVCxLQUFLLENBQUNVLFNBQVMsQ0FBQ0MsQ0FBQyxJQUFJQSxDQUFDLENBQUNSLEtBQUssS0FBS0EsS0FBSyxDQUFDO0VBQzVELE1BQU0sQ0FBRUYsS0FBSyxFQUFFVyxNQUFNLENBQUUsR0FBR0MsYUFBYSxDQUFDWCxZQUFZLENBQUM7RUFDckRWLFFBQVEsQ0FBRXNCLEtBQUssSUFBSztJQUNsQixJQUFJQSxLQUFLLENBQUNDLFdBQVcsRUFBRSxLQUFLSCxNQUFNLEVBQUU7TUFDbENKLEtBQUssQ0FBQ1QsRUFBRSxDQUFDO0lBQ1g7RUFDRixDQUFDLEVBQUU7SUFBRWlCLFFBQVEsRUFBRSxDQUFDVDtFQUFVLENBQUMsQ0FBQztFQUM1QixJQUFJQSxTQUFTLEVBQUU7SUFDYixNQUFNRixRQUFRLEdBQUlZLElBQUksSUFBSztNQUN6QlgsY0FBYyxHQUFHVyxJQUFJLENBQUM7TUFDdEIsSUFBSWIsSUFBSSxFQUFFO1FBQ1I7UUFDQWMsVUFBVSxDQUFDLE1BQU1WLEtBQUssQ0FBQ0osSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO01BQ2xDO0lBQ0YsQ0FBQztJQUNELG9CQUNFLE1BQUMsR0FBRztNQUFDLFdBQVcsRUFBQyxPQUFPO01BQUMsV0FBVyxFQUFDLE1BQU07TUFBQSx3QkFDekMsS0FBQyxJQUFJO1FBQUEsVUFBRUg7TUFBSyxFQUFRLGVBQ3BCLEtBQUMsV0FBVztRQUFPRCxLQUFLO1FBQUVTLFlBQVk7UUFBRUo7TUFBUSxFQUFNO0lBQUEsRUFDbEQ7RUFFVixDQUFDLE1BQU07SUFDTCxNQUFNYyxRQUFRLEdBQUduQixLQUFLLENBQUNvQixNQUFNLENBQUMsQ0FBQ0MsQ0FBQyxFQUFFVixDQUFDLEtBQUtXLElBQUksQ0FBQ0MsR0FBRyxDQUFDRixDQUFDLEVBQUVWLENBQUMsQ0FBQ1YsS0FBSyxDQUFDdUIsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMzRSxNQUFNUCxJQUFJLEdBQUdqQixLQUFLLENBQUNTLFlBQVksQ0FBQztJQUNoQyxvQkFDRSxNQUFDLEdBQUc7TUFBQyxXQUFXLEVBQUMsT0FBTztNQUFBLHdCQUN0QixLQUFDLElBQUk7UUFBQSxVQUFFUjtNQUFLLEVBQVEsZUFDcEIsS0FBQyxHQUFHO1FBQUMsUUFBUSxFQUFFa0IsUUFBUztRQUFBLHVCQUFDLE1BQUMsSUFBSTtVQUFBLFdBQUMsSUFBRSxFQUFDRixJQUFJLEVBQUVoQixLQUFLO1FBQUE7TUFBUSxFQUFNO0lBQUEsRUFDdkQ7RUFFVjtBQUNGO0FBRUEsU0FBU1ksYUFBYSxDQUFDWCxZQUFZLEVBQUU7RUFDbkMsTUFBTXVCLENBQUMsR0FBRyxlQUFlLENBQUNDLElBQUksQ0FBQ3hCLFlBQVksQ0FBQztFQUM1QyxJQUFJLENBQUN1QixDQUFDLEVBQUU7SUFDTixPQUFPLENBQUV2QixZQUFZLENBQUU7RUFDekI7RUFDQSxPQUFPLGNBQ0wsTUFBQyxJQUFJO0lBQUEsV0FBRXVCLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBQyxLQUFDLElBQUk7TUFBQyxTQUFTO01BQUEsVUFBRUEsQ0FBQyxDQUFDLENBQUM7SUFBQyxFQUFRLEVBQUNBLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFBQSxFQUFRLEVBQ3REQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUNWLFdBQVcsRUFBRSxDQUNuQjtBQUNIIn0=